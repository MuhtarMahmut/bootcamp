Java Bootcamp

	Review Topics:
		1. Primitives
		2. Wrapper class
		3. String
		4. String vs StringBuilder vs StringBuffer
		5. Loops: for & while
		6. Array
		7. for each loop
		8. Custom Methods
		9. Method Overloading
		10. Constructor
		11. Class & Objects
		12. Static vs Instance
		13. Import Statements
		14. Access Modifiers
		15. OOP Encapsulations
		16. OOP Inheritance
		17. Method Overriding
		18. Final keyword
		19. OOP Abstraction
		20. Abstract Class vs Interface
		21. OOP Polymorphism
		22. Reference Type Castings: Upcasting vs DownCasting
		23. Exceptions: checked & unchecked
		24. Exception Handlings
		25. final vs finally vs finalize
		26. garbage collection & garbage collector
		27. Collections: List, Set
		28. Iterable & Iterator
		29. Maps

		30. Leveraging AI for interviews


Primitves: int, double, char, boolean

	DataType var


Wrapper Classes: Object types of primitives
				Integer, Double...



Sequence of characters: String, StringBuilder, StringBuffer

		String: Immutable

		StringBuilder: Mutable

		StringBuffer: Mutable, Synchronized


Loop: Repeated Actions

	for loop: Number of iteration is fixed

	while loop: Number of iteration is unknown

		while(resultSet.hasNext){
			getTheData
		}

	Barnching statements: break & continue

		break: exits the loop

		continue: skips the iteration


Arrays: Data Structure
	Size is fixed.
	Faster
	Supports any data type
	Can be multidimensional

For Each loop: ONLY works with data structures
	The number of iterations and order are fixed



Methods: Set of instructions that can perform a task

	Improves the reusability, maintainability, reduces the duplications of our code


Method overloading: Multiple methods having the same name

				Parameters MUST be different

Constructor: Used for creating objects.
		executed when we create thne object


Class & Object:

		Object: instance of class. each object has its own memory

		class: blueprint/template of object. No memory is allocating for the classes


Static vs Instance

	Instance: belongs to the object and each object has its own instance

	static: belongs to the class. All objects will share the same copy


Import statements:

		regular import:
			import.package.class;

		static import:
			import static package.class.member;



Access Modifiers: 4 access modifiers

	private < default < protected < public

	private: only visible within same class

	default: only visible within same package

	protected: Alwasys visible within same package
				also visible outside the package to the sub class

	public: always visible



OOP Encapsulations: hiding data by declaring them private

					use public getters/setters methods to read/write the data

					Gives us full control over the data


			In my framework, I used it in POJO classes
							created multiple variables private
							generated getters & setters



OOP Inheritance: Building IS A relationships among the classes (parent/child)

		extends
		implments

		child class: can inherit all the visible variables and methods
					Constructors can not be inherited

		parent class: does not inherit anything. ONLY CONTAINS THE COMMON FEATURES OF ALL CHILD CLASSES

		In my framework:

			BasePage:
				public BasePage(){
					PageFactory.initElements(driver, this);
				}


			LoginPage extends Basepage
				public LoginPage(){
					super()
				}

			HomePage extends BasePage



Method Overriding: giving different implementations to the method

		MUST happen in sub class(es)

		Method name, return type, and parameters MUST be same

		Access modifier needs to be same ore more visible

		can not override: private, static and final methods


		toString()

		WebDriver driver = new ChromeDriver();

		driver.get();



Final keyword: unchangable

	class: Can not be inherited

	methods: can not be overrided

	variables: can not be re-assigned



OOP Abstraction: Hiding the implementation details

				Ignore the small details, and focus on essentials


			Abstract class: can not create objects from it. it's meant to be parent class

					BasePage

					TestBase


			Interface: for providing additional methods

				JavaScripExecuter
				TakeScreenShot
				WebDriver

				List
				Set

				Connection
				Statement
				ResultSet


OOP Polymorphism: Many forms. parent breferences to child objects


	WebDriver getDriver(){
		... return chrome;

		... return firefox;

		... return safari;

		... return Edge;
	}


Reference Type Castings: casting one reference type to another. (Inheritance is a MUST)

	Upcasting: casting smaller to larger (automatically done)

	downcasting: casting larger type to smaller

	WebDriver driver = new EdgeDriver();

	((TakeScreenshot)driver).takeScreenShot();



Exceptions: Issues within the code

	checked: Compile time exception

	unchecked: Runtime exceptions


Exception Handlings:

		1. Try & catch: used for handling both checked and unchecked exceptions


		2. throws: can only be used in method signature for checked exceptions








